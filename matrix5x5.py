import numpy as np
# импорт библиотеки numpy, используется
# для упрощения работы с матрицами

main_matrix = np.random.randint(1, 6, size=(5, 5))
# создание матрицы с помощью метода из библиотеки numpy, входные параметры:
# значения в матрице от 1 до 5 включительно, размерность 5 на 5

LAST = len(main_matrix)
# инициализация индекса последнего элемента в столбце
# заглавные буквы используюца для демонстрации того, что переменная - константа

m_diag = main_matrix.diagonal()
# метод из библиотеки numpy, возвращающий главную диагональ матрицы

sub_matrix = []
# инициализация списка для хранения элементов столбцов для последующего суммирования

column_index = []
# инициализация списка, которы будет хранить индексы столбцов, удовлетворяющих условию

print("Original matrix:")
for i in range(len(main_matrix)):
    for j in range(len(main_matrix[i])):
        print(main_matrix[i][j],  end = '  ')
    print()
# печать исходной матрицы: в основном цикле значения счетчика i меняются в диапазоне
# от 0 до значения длины списка main_matrix по вертикальной оси

# во внутреннем цикле счетчик изменяется в диапазоне
# от 0 до длины списка main_matrix по горизонтальной оси

# во время печати элемента указывается разделительный символ - два пробела
# после завершения итераций внутреннего цикла происходит переход на новую строку

print("\nMain diagonal: ")
print(m_diag)
# печать главной диагонали матрицы

for i in range(len(main_matrix)):
    if main_matrix[LAST - 1][i] == m_diag[i]:
        column_index.append(i + 1)
        for k in range(len(main_matrix)):
            sub_matrix.append(main_matrix[k][i])

# основной цикл программы, счетчик увеличивается в диапазоне
# от 0 до значения длины списка main_matrix по вертикальной оси
# элементы последнего ряда списка main_matrix сравниваются с соответствующими элементами
# списка m_diag, в котором находятся элементы главной диагонали
# если элементы равны, то с помощью цикла все элементы данного столбца добавляются
# в список sub_matrix с помощью метода append

if len(column_index) == 1:
    print("\nThe column to sum:\n")
# если найден только один столбец, об этом нужно сообщить в соответствующем числе

else:
    print("\nThe column to sums:\n")
# так же для числа столбцов больше 1

d = 0
# счетчик для списка индексов столбцов

for i in range(len(column_index)):
# цикл от 0 до значения количества записанных индексов

    print("Column № ", end = "")
    print(column_index[d], end = ":\n")
# печать номера столбца из списка column_index

    for j in range(i, i + LAST):
        print(sub_matrix[j])
#печать одного столбца из списка

    print("It's sum:", end = " ")
    print(sum(sub_matrix[i: i + LAST]), end = "\n\n")
    d += 1
# печать значения суммы столбца; так как столбцы внутри списка не разделены,
# используется метод слайсинга списков на заданное число элементов, зависящее от размерности исходной матрицы

input("Press Enter to exit.")
# опциональная строка для запуска программы через консоль, чтобы предотвратить преждевременное закрытие программы

